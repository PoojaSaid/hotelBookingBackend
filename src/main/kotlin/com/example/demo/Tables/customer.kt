package com.example.demo.Tables

import com.example.demo.Extension.*
import org.json.JSONArray
import org.json.JSONObject
import java.lang.Exception
import java.sql.PreparedStatement
import java.util.*

class customer {
    companion object {
        val TABLE_NAME = "customer"
        const val CUST_ID = "cust_id"
        //const val CUST_NAME = "cust_name"
        const val CUST_FIRSTNAME = "cust_firstname"
        const val CUST_LASTNAME = "cust_lastname"
        const val CUST_EMAIL = "cust_email"
        const val CUST_MOBILE = "cust_mobile"
        const val CUST_TYPE = "cust_type"
        var deleteKeys = arrayListOf(CUST_ID)
        var generatePrimaryKey = false

        var autoGeneratedColumn = arrayListOf(CUST_ID)

        var primaryKeys = arrayListOf(CUST_ID)

    }

    fun getDeleteKeys(): ArrayList<String> {
        return deleteKeys
    }

    fun getPKKeys(): ArrayList<String> {
        return primaryKeys
    }


    fun shouldGeneratePK(): ArrayList<Boolean> {
        val al = ArrayList<Boolean>()
        al.add(generatePrimaryKey)
        return al
    }


    fun getAutoGeneratedColumnName(): ArrayList<String> {
        return autoGeneratedColumn
    }

}


class customerWS {

    fun customerRegister(
            firstName: String,
            lastName: String,
            email: String,
            mobile: String
    ): String {

        var conn = getDBConnection()
        conn!!.autoCommit = false

        //Validation of enter details
        var firstNameValidation = Validation().maxRangeValidation(firstName)
        var lastNameValidation = Validation().maxRangeValidation(lastName)
        var emailValidation = Validation().maxRangeValidation(email)
        var mobileValidation = Validation().mobileNoValidation(mobile)

        var validationDone = true

        var error = ""

        if (!firstNameValidation) {
            error = Validation().genMsg("first name should be less than 255 character")
            validationDone = false
        }
        if (!lastNameValidation) {
            error = Validation().genMsg("last name should be less than 255 character")
            validationDone = false
        }
        if (!emailValidation) {
            error = Validation().genMsg("email should be less than 255 character")
            validationDone = false
        }

        if (!mobileValidation) {
            error = Validation().genMsg("email should be less than 255 character")
            validationDone = false
        }

        if (!validationDone && error.length > 0) {
            var ErroRes = Validation().validationMsg(error)

            return ErroRes.toString()
        }
        //UNIQUE id GENERATION
        var lsCustID = UUID.randomUUID().toString()

        /*var lsSql = " INSERT INTO ${customer.TABLE_NAME} " +
                    " (${customer.CUST_FIRSTNAME}, ${customer.CUST_LASTNAME}, ${customer.CUST_EMAIL}, ${customer.CUST_MOBILE}, ${customer.CUST_TYPE}, ${customer.CUST_ID})" +
                    " VALUES ('$firstName','$lastName','$email','$mobile','C','$lsCustID') "*/

        var jsonResponse = JSONObject()

        lateinit var preparedStatement: PreparedStatement
        var sqlStatements = ArrayList<SQLModel>()



        var jsonObject = JSONObject()


        jsonObject.put(customer.CUST_ID, lsCustID)
        jsonObject.put(customer.CUST_FIRSTNAME, firstName)
        jsonObject.put(customer.CUST_LASTNAME, lastName)
        jsonObject.put(customer.CUST_EMAIL, email)
        jsonObject.put(customer.CUST_MOBILE, mobile)
        jsonObject.put(customer.CUST_TYPE, "C")


        try {
            var jsonArray = JSONArray()
            jsonArray.put(jsonObject)

            var insert = jsonInsert(jsonArray, customer.TABLE_NAME, conn)
            for (x in 0 until insert.size) {
                sqlStatements.add(insert[x])
            }
            for (i in 0 until sqlStatements.size) {
                var e = sqlStatements[i]
                preparedStatement = conn!!.prepareStatement(e.statement)
                preparedStatement.executeUpdate(e.statement)
            }
            conn!!.commit()
        } catch (e: Exception) {
            conn!!.rollback();
            jsonResponse.put(DBFunctions.STATUS, DBFunctions.FAILED)
            jsonResponse.put(DBFunctions.EXCEPTION, e.toString())
            return jsonResponse.toString()
        } finally {
            conn.close()
        }
        jsonResponse.put(DBFunctions.STATUS, DBFunctions.SUCCESS)
        jsonResponse.put(DBFunctions.RESPONSE, "Thank you , for registering on our hotel.")

        return jsonResponse.toString()

    }

    fun login(
            email: String,
            mobile: String
    ): String {
        var conn = getDBConnection()

        var lsSQL = " SELECT * " +
                " FROM ${customer.TABLE_NAME} " +
                " WHERE ${customer.CUST_EMAIL} = '$email' " +
                " AND ${customer.CUST_MOBILE} = '$mobile'"

        var laCustomer = rowsToJsonObject(lsSQL, conn)
        var jsonResponse = JSONObject()
        if (laCustomer.length() > 0) {
            jsonResponse.put(DBFunctions.STATUS, DBFunctions.SUCCESS)
            jsonResponse.put(DBFunctions.DATA, laCustomer)
        } else {
            jsonResponse.put(DBFunctions.RESPONSE, " Please enter valid details.")
            jsonResponse.put(DBFunctions.STATUS, DBFunctions.FAILED)
        }

        return jsonResponse.toString()
    }

    fun createBooking(
            guestNumber: Int,
            roomType: String,
            startDate: String,
            endDate: String
    ): String {

        var conn = getDBConnection()

        var lsSql = " SELECT * FROM ${room.TABLE_NAME} "

        var lsWhere = " WHERE ${room.R_STATUS} = 'A'"

        var jsonResponse = JSONObject()
        if (guestNumber > 0) {

            lsWhere = lsWhere + " AND ${room.R_CAPACITY} <= '$guestNumber'"
        }

        if (roomType.length > 0) {

            lsWhere = lsWhere + " AND ${room.R_TYPE} = '$roomType'"
        }


        if(startDate.length > 0)
        {

            lsWhere = lsWhere + " AND (STR_TO_DATE(${room.R_OUTDATE},'%d/%m/%Y') >= '$startDate' or ${room.R_OUTDATE} = '')"
        }

        lsSql = lsSql + lsWhere + " LIMIT 1 "

        var laRoom = rowsToJsonObject(lsSql, conn)

        var lsRoomId = laRoom.getString(room.R_ID)

        lsSql = " UPDATE ${room.TABLE_NAME} " +
                " SET ${room.R_ENTERDATE} = '$startDate', ${room.R_OUTDATE} = '$endDate', ${room.R_STATUS} = 'B'" +
                " WHERE ${room.R_ID} = '$lsRoomId' "

        var ps = conn!!.prepareStatement(lsSql)

        ps.executeUpdate()
        jsonResponse.put(DBFunctions.STATUS, DBFunctions.SUCCESS)
        jsonResponse.put(DBFunctions.RESPONSE, "Your booking is confirmed from '$startDate' to '$endDate'.Thank you ! ")

        return jsonResponse.toString()
    }
}