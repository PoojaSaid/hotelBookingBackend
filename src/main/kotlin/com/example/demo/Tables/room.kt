package com.example.demo.Tables

import com.example.demo.Extension.*
import org.json.JSONArray
import org.json.JSONObject
import java.lang.Exception
import java.sql.PreparedStatement
import java.util.*

class room {
    companion object {
        val TABLE_NAME = "room"
        const val R_CAPACITY = "r_capacity"
        const val R_TYPE = "r_type"
        const val R_ENTERDATE = "r_startdate"
        const val R_OUTDATE = "r_enddate"
        const val R_STATUS = "r_status"
        const val R_ID = "r_id"
        //const val CUST_TYPE = "cust_type"
        var deleteKeys = arrayListOf(R_ID)
        var generatePrimaryKey = false

        var autoGeneratedColumn = arrayListOf(R_ID)

        var primaryKeys = arrayListOf(R_ID)
        const val R_EXE_OUTDATE = "CONCAT(substr($R_OUTDATE,7,4),'/',substr($R_OUTDATE,4,2),'/',substr($R_OUTDATE,1,2)) "


    }

    fun getDeleteKeys(): ArrayList<String> {
        return deleteKeys
    }

    fun getPKKeys(): ArrayList<String> {
        return primaryKeys
    }


    fun shouldGeneratePK(): ArrayList<Boolean> {
        val al = ArrayList<Boolean>()
        al.add(generatePrimaryKey)
        return al
    }


    fun getAutoGeneratedColumnName(): ArrayList<String> {
        return autoGeneratedColumn
    }

}

class roomsWS {

    fun addRoom(
            guestNumber: Int,
            roomType: String
    ): String {
        var conn = getDBConnection()
        conn!!.autoCommit = false

        var guestNumberValidation = Validation().capacityValidation(guestNumber)
        var validationDone = true

        var error = ""

        if (!guestNumberValidation) {
            error = Validation().genMsg("Enter guest capacity in integer.")
            validationDone = false
        }

        if (!validationDone && error.length > 0) {
            var ErroRes = Validation().validationMsg(error)

            return ErroRes.toString()
        }

        lateinit var preparedStatement: PreparedStatement
        var sqlStatements = ArrayList<SQLModel>()

        //UNIQUE id GENERATION
        var lsRoomID = UUID.randomUUID().toString()
        var jsonObject = JSONObject()
        var jsonResponse = JSONObject()

        jsonObject.put(room.R_CAPACITY, guestNumber)
        jsonObject.put(room.R_TYPE, roomType)
        jsonObject.put(room.R_ID, lsRoomID)
        var jsonArray = JSONArray()
        try {

            jsonArray.put(jsonObject)

            var insert = jsonInsert(jsonArray, room.TABLE_NAME, conn)
            for (x in 0 until insert.size) {
                sqlStatements.add(insert[x])
            }
            for (i in 0 until sqlStatements.size) {
                var e = sqlStatements[i]
                preparedStatement = conn!!.prepareStatement(e.statement)
                preparedStatement.executeUpdate(e.statement)
            }
            conn!!.commit()
        } catch (e: Exception) {
            conn!!.rollback();
            jsonResponse.put(DBFunctions.STATUS, DBFunctions.FAILURE)
            jsonResponse.put(DBFunctions.EXCEPTION, e.toString())
            return jsonResponse.toString()
        } finally {
            conn.close()
        }
        jsonResponse.put(DBFunctions.STATUS, DBFunctions.SUCCESS)
        jsonResponse.put(DBFunctions.DATA, jsonArray)

        return jsonResponse.toString()
    }

    fun getRoom(
            date: String

    ): String {
        var conn = getDBConnection()

        var lsSql = " SELECT * " +
                " FROM ${room.TABLE_NAME} "

        var lsWhere = ""

        if (date.isNotEmpty()) {
            if (lsWhere.length > 0) {

                lsWhere = lsWhere + " AND"
            } else {

                lsWhere = " WHERE "
            }
            lsWhere = lsWhere +" STR_TO_DATE(${room.R_EXE_OUTDATE}, '%d/%m/%Y') = '$date'"
        }

        lsSql = lsSql + lsWhere

        /*if (pagination.equals("Y")) {

            lsSql = lsSql + " LIMIT ${GlobalValue.pageRows}"
            if (pageNo > 1) {
                var offSet = (pageNo - 1) * GlobalValue.pageRows
                lsSql = lsSql + " OFFSET $offSet"
            }


        }*/

        var laRoom = rowsToJsonArray(lsSql, conn)

        var jsonResponse = JSONObject()
        if(laRoom.length() > 0) {
            jsonResponse.put(DBFunctions.DATA, laRoom)
            jsonResponse.put(DBFunctions.STATUS, DBFunctions.SUCCESS)
        }else{
            jsonResponse.put(DBFunctions.STATUS, DBFunctions.FAILED)
            jsonResponse.put(DBFunctions.MESSAGE," Room is not available on enter date. Sorry for inconvenience.")
        }
        conn!!.close()
        return jsonResponse.toString()

    }


}